alias chx='chmod +x'
alias clear="clear; printf '\e[?25h'"
alias clr='tput reset'
alias clr-fetch='tput reset; xdgfetch'
alias clr-info='tput reset; echo; inxi -F -v 4; echo'
alias clr-todo='tput reset; todo all'
alias cursor-hide="printf '\e[?25l'"
alias cursor-show="printf '\e[?25h'"
alias drive-speed='hdparam -Tt'
alias git-sign='git commit -a -S -m'
alias gitlimit="curl -s -H 'Authorization: token 5a1b1a42d6686567de8e719d7ed49284f5e84159' -X GET 'https://api.github.com/rate_limit' | jq '.'"
alias lappy='tput reset; ssh simonizor@10.42.0.1'
alias load-aliases='. ~/.zsh_aliases'
alias mce='mcedit'
alias mce-aliases='mcedit ~/.zsh_aliases; . ~/.zsh_aliases'
alias mce-zshrc='mcedit ~/.zshrc; zsh'
alias mopidy-start='cursor-hide; $HOME/Scripts/mopidy-start.sh'
alias mpc-watch='cursor-hide && watch -tn 1 "mpc status | head -n 2" && cursor-show'
alias nohup='nohup '
alias reset='tput reset'
alias rex='remote-exec'
alias speedo='speedometer -s -r ens33 -c -s -t ens33'
alias strapg='apg -a 1 -m 30 -n 4'
alias sudo='sudo '
alias vtop='vtop --theme brew'
alias weather='weather --no-cache-data'
alias weather-mp='echo "$(tput setaf 10)$(tput bold)$(weather --imperial -q -a --no-cache kmrj)"'
alias weather-forcast='tput reset; echo "$(tput setaf 4)$(tput bold)$(weather -n -q -f --no-cache kmrj)"; weather-radar'
alias weather-watch='cursor-hide; watch -tcxn 300 weather --imperial -q -a --no-cache kmrj && cursor-show'
alias aptt='$HOME/github/scripts/apttool/apttool.sh'
alias cpdots='$HOME/github/scripts/misc/cpdots.sh'
alias erm='$HOME/github/scripts/easyrm/easyrm.sh'
alias fakegame='$HOME/Scripts/discordfakegame.sh'
alias lyrics='tput reset; $HOME/github/scripts/misc/lyrics.sh'
alias lyrics-playing='tput reset; $HOME/github/scripts/misc/lyrics.sh "$(mpc -f %artist% | head -n 1)" "$(mpc -f %title% | head -n 1)"'
alias mydiscord-load='mydiscord --css /home/simonizor/Documents/Text/discord-custom.css --js /home/simonizor/Documents/Text/discord-custom.js'
alias imgman='$HOME/github/appimgman/appimgman'
alias addgitimg='$HOME/Scripts/appimg-github.sh'
alias binary-convert='$HOME/Scripts/binary-convert.sh'
alias passman='$HOME/github/gpgpassman/gpgpassman.sh'
alias speedtest='$HOME/github/scripts/speedtest/speedtest.sh'
alias gspm='$HOME/github/spm/spm'
alias sudoBot='cursorhide; $HOME/sudoBot/sudostart.sh'
alias tarpkg='$HOME/github/tar-pkg/tar-pkg'
alias todo='$HOME/github/scripts/misc/todo.sh'
alias xdgfetch='xdgfetch -c 4'
alias xdgfetch-git='$HOME/github/xdgfetch/xdgfetch -c 4'
alias urltotmp='$HOME/Scripts/urltotmp.sh'
alias wttr-refresh='clr; $HOME/github/scripts/misc/wttrrefresh.sh'
alias color-test='tput reset; echo; bash -c "$(wget --quiet https://gist.githubusercontent.com/wagnermoschini/8893311/raw/9de710eea1a86fb955fb221e847d722e9bc3b024/colortest.sh -O -)"'
alias color-invaders='tput reset; echo; bash -c "$(wget --quiet https://github.com/chrisduerr/dotfiles/raw/master/files/Scripts/test_colors0 -O -)"'

conf="$HOME/.config"
docs="$HOME/Documents"
down="$HOME/Downloads"
pics="$HOME/Pictures"
github="$HOME/github"

time="$(date +'%l:%M:%S %p')"

dirsize () {
    du -h --max-depth=1 "$@" | sort -h -r
}

dirsize-a () {
    du -h "$@" | sort -h -r
}

echo-wget () {
    echo "$(wget --quiet "$@" -O -)" | grep -v '#'
}

filesize () {
    du -h -a --max-depth=1 "$@" | sort -h -r
}

filesize-a () {
    du -h -a "$@" | sort -h -r
}

mopidy-recache () {
    curl -d '{"jsonrpc": "2.0", "id": 1, "method": "core.library.refresh"}' http://localhost:6680/mopidy/rpc
}

mpc-current () {
    while true; do
        mpc current --wait
    done
}

remote-exec () {
    bash -c "$(wget --quiet $@ -O -)"
}

time-watch () {
    printf '\e[?25l'
    watch -tcn 1 'echo "$(tput setaf 4)$(tput bold)          $(date "+%D     %I:%M:%S")"'
}

pstop () {
    printf '\e[?25l' && $HOME/github/scripts/misc/pstop.sh $@; printf '\e[?25h'
}

pstop-watch () {
    printf '\e[?25l' && watch -tn 1 $HOME/github/scripts/misc/pstop.sh $@; printf '\e[?25h'
}

mpvyt () { mpv ytdl://ytsearch10:"$*" }

wttr (){
    LOCATION="$1"
    FLOCATION="$2"
    case $1 in
        0*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?0"
            LOCATION=""
            FLOCATION=""
            ;;
        1*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?1"
            LOCATION=""
            FLOCATION=""
            ;;
        2*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?2"
            LOCATION=""
            FLOCATION=""
            ;;
        *)
            if [ -z "$LOCATION" ]; then
                LOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$LOCATION"
            LOCATION=""
    esac
}