alias alarm='$HOME/github/alarm-sh/alarm.sh'
alias chx='chmod +x'
alias clear="clear; printf '\e[?25h'"
alias clr='tput reset'
alias cursor-hide="printf '\e[?25l'"
alias cursor-show="printf '\e[?25h'"
alias drive-speed='hdparam -Tt'
alias edit-aliases='mcedit ~/.zsh_aliases'
alias edit-zshrc='mcedit ~/.zshrc; zsh'
alias git-sign='git commit -a -S -m'
alias lappy='tput reset; ssh simonizor@10.42.0.1'
alias load-aliases='. ~/.zsh_aliases'
alias mce='mcedit'
alias mopidy-start='cursor-hide; $HOME/Scripts/mopidy-start.sh'
alias mpc-watch='cursor-hide && watch -tn 1 "mpc status | head -n 2" && cursor-show'
alias rex='remote-exec'
alias speedo='speedometer -s -r ens33 -c -s -t ens33'
alias sudo='sudo '
alias weather='weather --no-cache-data'
alias weather-mp='echo "$(tput setaf 10)$(tput bold)$(weather --imperial -q -a --no-cache kmrj)"'
alias weather-forcast='tput reset; echo "$(tput setaf 4)$(tput bold)$(weather -n -q -f --no-cache kmrj)"; weather-radar'
alias cpdots='$HOME/github/scripts/misc/cpdots.sh'
alias erm='$HOME/github/scripts/easyrm/easyrm.sh'
alias fakegame='$HOME/Scripts/discordfakegame.sh'
alias gspm='$HOME/github/spm/spm'
alias gtodo='$HOME/github/todo/todo.sh'
alias lyrics='tput reset; $HOME/github/scripts/misc/lyrics.sh'
alias lyrics-playing='tput reset; $HOME/github/scripts/misc/lyrics.sh "$(mpc -f %artist% | head -n 1)" "$(mpc -f %title% | head -n 1)"'
alias mydiscord-load='mydiscord --css /home/simonizor/Documents/Text/discord-custom.css --js /home/simonizor/Documents/Text/discord-custom.js'
alias pstop='$HOME/github/scripts/misc/pstop.sh -r=40 -s=mem'
alias binary-convert='$HOME/Scripts/binary-convert.sh'
alias passman='$HOME/github/gpgpassman/gpgpassman.sh'
alias speedtest='$HOME/github/scripts/speedtest/speedtest.sh'
alias xdgfetch='tput reset; xdgfetch -c=4'
alias xdgfetch-git='$HOME/github/xdgfetch/xdgfetch'
alias wttr-refresh='clr; $HOME/github/scripts/misc/wttrrefresh.sh'
alias color-test='echo; bash -c "$(wget --quiet https://gist.githubusercontent.com/wagnermoschini/8893311/raw/9de710eea1a86fb955fb221e847d722e9bc3b024/colortest.sh -O -)"'
alias color-invaders='bash -c "$(wget --quiet https://github.com/chrisduerr/dotfiles/raw/master/files/Scripts/test_colors0 -O -)"'

appimages="/media/simonizor/0d208b29-3b29-4ffc-99be-1043b9f3c258/appimages/"
appbuilds="/media/simonizor/0d208b29-3b29-4ffc-99be-1043b9f3c258/appimages/builds"
appgit="/media/simonizor/0d208b29-3b29-4ffc-99be-1043b9f3c258/appimages/AppImages"
conf="$HOME/.config"
docs="$HOME/Documents"
down="$HOME/Downloads"
github="$HOME/github"
pics="$HOME/Pictures"
releases="$HOME/github/all-releases"

time="$(date +'%l:%M:%S %p')"

dirsize () {
    du -h --max-depth=1 "$@" | sort -h -r
}

dirsize-a () {
    du -h "$@" | sort -h -r
}

echo-wget () {
    echo "$(wget --quiet "$@" -O -)" | grep -v '#'
}

filesize () {
    du -h -a --max-depth=1 "$@" | sort -h -r
}

filesize-a () {
    du -h -a "$@" | sort -h -r
}

mopidy-recache () {
    curl -d '{"jsonrpc": "2.0", "id": 1, "method": "core.library.refresh"}' http://localhost:6680/mopidy/rpc
}

mpc-current () {
    while true; do
        mpc current --wait
    done
}

remote-exec () {
    bash -c "$(wget --quiet $@ -O -)"
}

time-watch () {
    printf '\e[?25l'
    watch -tcn 1 'echo "$(tput setaf 4)$(date "+%t%D%t%I:%M:%S")"'
    printf '\e[?25h'
}

pstop-watch () {
    printf '\e[?25l'
    watch -tcn 3 "/home/simonizor/github/scripts/misc/pstop.sh -r=10 -p=2 -s=mem"
    printf '\e[?25h'
}

mpvyt () { mpv ytdl://ytsearch10:"$*" }

weather-watch () {
    printf '\e[?25l'
    watch -tcn 300 'echo "$(tput setaf 4)$(weather --imperial -q -a --no-cache kmrj)"'
    printf '\e[?25h'
}

wttr (){
    LOCATION="$1"
    FLOCATION="$2"
    case $1 in
        0*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?0"
            LOCATION=""
            FLOCATION=""
            ;;
        1*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?1"
            LOCATION=""
            FLOCATION=""
            ;;
        2*)
            if [ -z "$FLOCATION" ]; then
                FLOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$FLOCATION?2"
            LOCATION=""
            FLOCATION=""
            ;;
        *)
            if [ -z "$LOCATION" ]; then
                LOCATION="$location"
            fi
            tput reset
            curl "wttr.in/$LOCATION"
            LOCATION=""
    esac
}
